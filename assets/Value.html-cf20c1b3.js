import{_ as o,M as p,p as c,q as l,N as s,U as e,t as n,a1 as t}from"./framework-cbc93935.js";const i={},u=t(`<h1 id="color-value-and-change-value" tabindex="-1"><a class="header-anchor" href="#color-value-and-change-value" aria-hidden="true">#</a> Color value and change value</h1><h2 id="color-red" tabindex="-1"><a class="header-anchor" href="#color-red" aria-hidden="true">#</a> color.red()</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>color<span class="token punctuation">.</span><span class="token function">red</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">number</span>
color<span class="token punctuation">.</span><span class="token function">red</span><span class="token punctuation">(</span>amount<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Color
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>parameter amount?: number <ul><li>When the amount is not passed in, get the value of the red channel of rgb, and the value range is [0, 255]</li><li>When the amount is passed in, modify the value of the red channel and return a new Color instance</li></ul></li></ul><p>Example 1: Get the red channel value</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token function">colorsea</span><span class="token punctuation">(</span><span class="token string">&#39;#ffcc22&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">red</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 255</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Example 2: Set the red channel to 200</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token function">colorsea</span><span class="token punctuation">(</span><span class="token string">&#39;#ffcc22&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">red</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span> <span class="token comment">// Color #c8cc22</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,8),r=t(`<h2 id="color-green" tabindex="-1"><a class="header-anchor" href="#color-green" aria-hidden="true">#</a> color.green()</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>color<span class="token punctuation">.</span><span class="token function">green</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">number</span>
color<span class="token punctuation">.</span><span class="token function">green</span><span class="token punctuation">(</span>amount<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Color
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>parameter amount?: number <ul><li>When the amount is not passed in, get the value of the green channel of rgb, and the value range is [0, 255]</li><li>When the amount is passed in, modify the value of the green channel and return a new Color instance</li></ul></li></ul><p>Example 1: Get the green channel value</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token function">colorsea</span><span class="token punctuation">(</span><span class="token string">&#39;#ffcc22&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">green</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 204</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Example 2: Set the green channel to 100</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token function">colorsea</span><span class="token punctuation">(</span><span class="token string">&#39;#ffcc22&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">green</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token comment">// Color #ff6422</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,7),d=t(`<h2 id="color-blue" tabindex="-1"><a class="header-anchor" href="#color-blue" aria-hidden="true">#</a> color.blue()</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>color<span class="token punctuation">.</span><span class="token function">blue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">number</span>
color<span class="token punctuation">.</span><span class="token function">blue</span><span class="token punctuation">(</span>amount<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Color
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>parameter amount?: number <ul><li>When the amount is not passed in, get the value of the blue channel of rgb, and the value range is [0, 255]</li><li>When the amount is passed in, it modifies the value of the blue channel and returns a new Color instance</li></ul></li></ul><p>Example 1: Get the blue channel value</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token function">colorsea</span><span class="token punctuation">(</span><span class="token string">&#39;#ffcc22&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">blue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 34</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Example 2: Set the blue channel to 255</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token function">colorsea</span><span class="token punctuation">(</span><span class="token string">&#39;#ffcc22&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">blue</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token comment">// Color #ffccff</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,7),k=t(`<h2 id="color-hue" tabindex="-1"><a class="header-anchor" href="#color-hue" aria-hidden="true">#</a> color.hue()</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>color<span class="token punctuation">.</span><span class="token function">hue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">number</span>
color<span class="token punctuation">.</span><span class="token function">hue</span><span class="token punctuation">(</span>amount<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Color
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>parameter amount?: number <ul><li>When the amount is not passed in, the hue value is obtained, and the range is [0, 360)</li><li>When the amount is passed in, the hue value is modified and a new Color instance is returned</li></ul></li></ul><p>Example 1: get hue</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token function">colorsea</span><span class="token punctuation">(</span><span class="token string">&#39;#ffcc22&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 46</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Example 2: Set hue to 120Â°</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token function">colorsea</span><span class="token punctuation">(</span><span class="token string">&#39;#ffcc22&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hue</span><span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">)</span> <span class="token comment">// Color #24ff24</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,7),m=t(`<h2 id="color-saturation" tabindex="-1"><a class="header-anchor" href="#color-saturation" aria-hidden="true">#</a> color.saturation()</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>color<span class="token punctuation">.</span><span class="token function">saturation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">number</span>
color<span class="token punctuation">.</span><span class="token function">saturation</span><span class="token punctuation">(</span>amount<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Color
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>parameter amount?: number <ul><li>When the amount is not passed in, get the saturation value, the range is [0, 100]</li><li>When the amount is passed in, the saturation is modified and a new Color instance is returned</li></ul></li></ul><p>Example 1: Get Saturation</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token function">colorsea</span><span class="token punctuation">(</span><span class="token string">&#39;#ffcc22&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">saturation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 100</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Example 2: Set saturation to 20%</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token function">colorsea</span><span class="token punctuation">(</span><span class="token string">&#39;#ffcc22&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">saturation</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token comment">// Color #a79d7b</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,7),h=t(`<h2 id="color-lightness" tabindex="-1"><a class="header-anchor" href="#color-lightness" aria-hidden="true">#</a> color.lightness()</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>color<span class="token punctuation">.</span><span class="token function">lightness</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">number</span>
color<span class="token punctuation">.</span><span class="token function">lightness</span><span class="token punctuation">(</span>amount<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Color
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>parameter amount?: number <ul><li>When the amount is not passed in, get the lightness, the range is [0, 100]</li><li>When the amount is passed in, it is used to modify the lightness and return a new Color instance</li></ul></li></ul><p>Example 1: Get lightness</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token function">colorsea</span><span class="token punctuation">(</span><span class="token string">&#39;#ffcc22&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lightness</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 57</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Example 2: Set lightness to 30% s</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token function">colorsea</span><span class="token punctuation">(</span><span class="token string">&#39;#ffcc22&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lightness</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token comment">// Color #664e00</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,7),v=t(`<h2 id="color-alpha" tabindex="-1"><a class="header-anchor" href="#color-alpha" aria-hidden="true">#</a> color.alpha()</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>color<span class="token punctuation">.</span><span class="token function">alpha</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">number</span>
color<span class="token punctuation">.</span><span class="token function">alpha</span><span class="token punctuation">(</span>amount<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Color
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>parameter amount?: number <ul><li>When the amount is not passed in, the value of the alpha channel is obtained, and the range is [0, 100]</li><li>When the amount is passed in, modify the value of the alpha channel and return a new Color instance</li></ul></li></ul><p>Example 1: Get Opacity</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token function">colorsea</span><span class="token punctuation">(</span><span class="token string">&#39;#22994a&#39;</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">alpha</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 90</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Example 2: Set the opacity to 30%</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token function">colorsea</span><span class="token punctuation">(</span><span class="token string">&#39;#22994a&#39;</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">alpha</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token comment">// Color #22994a33</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,7),b=t(`<h2 id="color-luma" tabindex="-1"><a class="header-anchor" href="#color-luma" aria-hidden="true">#</a> color.luma()</h2><p>get luma</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>color<span class="token punctuation">.</span><span class="token function">luma</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">number</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Example:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token function">colorsea</span><span class="token punctuation">(</span><span class="token string">&#39;#22994a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">luma</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 0.23616959154733871</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>For methods such as <code>color.red()</code>,<code>color.green()</code>,<code>color.blue()</code>,<code>color.hue()</code>,<code>color.saturation()</code>,<code>color.lightness()</code>, <code>color.alpha()</code>,<code>color.luma()</code>, if the calculation result is a decimal, all decimal places will be returned, and the result will not be rounded or how many decimal places will be truncated.</p></div>`,6);function f(g,x){const a=p("ColorBox");return c(),l("div",null,[u,s(a,{"box-color":"#ffcc22"},{default:e(()=>[n("#ffcc22")]),_:1}),n(" -> "),s(a,{"box-color":"#c8cc22"},{default:e(()=>[n("#c8cc22")]),_:1}),r,s(a,{"box-color":"#ffcc22"},{default:e(()=>[n("#ffcc22")]),_:1}),n(" -> "),s(a,{"box-color":"#ff6422"},{default:e(()=>[n("#ff6422")]),_:1}),d,s(a,{"box-color":"#ffcc22"},{default:e(()=>[n("#ffcc22")]),_:1}),n(" -> "),s(a,{"box-color":"#ffccff"},{default:e(()=>[n("#ffccff")]),_:1}),k,s(a,{"box-color":"#ffcc22"},{default:e(()=>[n("#ffcc22")]),_:1}),n(" -> "),s(a,{"box-color":"#24ff24"},{default:e(()=>[n("#24ff24")]),_:1}),m,s(a,{"box-color":"#ffcc22"},{default:e(()=>[n("#ffcc22")]),_:1}),n(" -> "),s(a,{"box-color":"#a79d7b"},{default:e(()=>[n("#a79d7b")]),_:1}),h,s(a,{"box-color":"#ffcc22"},{default:e(()=>[n("#ffcc22")]),_:1}),n(" -> "),s(a,{"box-color":"#664e00"},{default:e(()=>[n("#664e00")]),_:1}),v,s(a,{"box-color":"#22994a"},{default:e(()=>[n("#22994a")]),_:1}),n(" -> "),s(a,{"box-color":"#22994a33"},{default:e(()=>[n("#22994a33")]),_:1}),b])}const _=o(i,[["render",f],["__file","Value.html.vue"]]);export{_ as default};
