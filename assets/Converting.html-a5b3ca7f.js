import{_ as l,p as n,q as o,a1 as a}from"./framework-cbc93935.js";const e={},r=a(`<h1 id="颜色空间转换" tabindex="-1"><a class="header-anchor" href="#颜色空间转换" aria-hidden="true">#</a> 颜色空间转换</h1><p>创建color实例后，可以通过color实例的以下这些方法取得对应的颜色空间数值，从而轻易地进行颜色空间转换。</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>方法包括：<code>rgb()</code> <code>cmyk()</code> <code>hsl()</code> <code>hsv()</code> <code>hsi()</code> <code>hwb()</code> <code>xyz()</code> <code>lab()</code> <code>lch()</code> <code>xyY()</code> 这些方法都有一个参数<code>round</code>，其类型为<code>boolean | number</code><br>默认值为 <code>true</code></p><ul><li>当为 <code>true</code> 时，按默认的设定保留小数位数。</li><li>为 <code>false</code> 时，将返回所有计算出的小数位。</li><li>为 <code>number</code> 时，用于指定保留多少位小数。</li></ul></div><p><strong>示例：</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// hsl to rgb</span>
<span class="token keyword">const</span> color <span class="token operator">=</span> colorsea<span class="token punctuation">.</span><span class="token function">hsl</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span>
color<span class="token punctuation">.</span><span class="token function">rgb</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// [255, 0, 0]</span>
<span class="token comment">// to lab</span>
color<span class="token punctuation">.</span><span class="token function">lab</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// [53.24, 80.09, 67.2]</span>
<span class="token comment">// 不处理小数</span>
color<span class="token punctuation">.</span><span class="token function">lab</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token comment">// [ 53.24079414130722, 80.09245959641109, 67.20319651585301 ]</span>

<span class="token comment">// 其它颜色空间方法类似...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="color-rgb" tabindex="-1"><a class="header-anchor" href="#color-rgb" aria-hidden="true">#</a> color.rgb()</h2><ul><li><p><strong>@param</strong> round: boolean | number</p><ul><li>false: 不进行小数处理，返回所有小数位</li><li>true: （默认值）返回整数，不保留小数</li><li>number: 自定义指定多少位小数</li></ul></li><li><p><strong>@return</strong> 返回<code>[r, g, b]</code></p></li></ul><h2 id="color-rgba" tabindex="-1"><a class="header-anchor" href="#color-rgba" aria-hidden="true">#</a> color.rgba()</h2><ul><li><p><strong>@param</strong> round: boolean | number</p><ul><li>false: 不进行小数处理，返回所有小数位</li><li>true: （默认值）返回整数，不保留小数</li><li>number: 自定义指定多少位小数</li></ul></li><li><p><strong>@return</strong> 返回<code>[r, g, b, alpha]</code></p></li></ul><h2 id="color-cmyk" tabindex="-1"><a class="header-anchor" href="#color-cmyk" aria-hidden="true">#</a> color.cmyk()</h2><ul><li><p><strong>@param</strong> round: boolean | number</p><ul><li>false: 不进行小数处理，返回所有小数位</li><li>true: （默认值）返回整数，不保留小数</li><li>number: 自定义指定多少位小数</li></ul></li><li><p><strong>@return</strong> 返回<code>[c, m, y, k]</code></p></li></ul><h2 id="color-hsl" tabindex="-1"><a class="header-anchor" href="#color-hsl" aria-hidden="true">#</a> color.hsl()</h2><ul><li><p><strong>@param</strong> round: boolean | number</p><ul><li>false: 不进行小数处理，返回所有小数位</li><li>true: （默认值）返回整数，不保留小数</li><li>number: 自定义指定多少位小数</li></ul></li><li><p><strong>@return</strong> 返回<code>[h, s, l]</code></p></li></ul><h2 id="color-hsla" tabindex="-1"><a class="header-anchor" href="#color-hsla" aria-hidden="true">#</a> color.hsla()</h2><ul><li><p><strong>@param</strong> round: boolean | number</p><ul><li>false: 不进行小数处理，返回所有小数位</li><li>true: （默认值）返回整数，不保留小数</li><li>number: 自定义指定多少位小数</li></ul></li><li><p><strong>@return</strong> 返回<code>[h, s, l, alpha]</code></p></li></ul><h2 id="color-hsv" tabindex="-1"><a class="header-anchor" href="#color-hsv" aria-hidden="true">#</a> color.hsv()</h2><ul><li><p><strong>@param</strong> round: boolean | number</p><ul><li>false: 不进行小数处理，返回所有小数位</li><li>true: （默认值）返回整数，不保留小数</li><li>number: 自定义指定多少位小数</li></ul></li><li><p><strong>@return</strong> 返回<code>[h, s, v]</code></p></li></ul><h2 id="color-hsi" tabindex="-1"><a class="header-anchor" href="#color-hsi" aria-hidden="true">#</a> color.hsi()</h2><ul><li><p><strong>@param</strong> round: boolean | number</p><ul><li>false: 不进行小数处理，返回所有小数位</li><li>true: （默认值）返回整数，不保留小数</li><li>number: 自定义指定多少位小数</li></ul></li><li><p><strong>@return</strong> 返回<code>[h, s, i]</code></p></li></ul><h2 id="color-hwb" tabindex="-1"><a class="header-anchor" href="#color-hwb" aria-hidden="true">#</a> color.hwb()</h2><ul><li><p><strong>@param</strong> round: boolean | number</p><ul><li>false: 不进行小数处理，返回所有小数位</li><li>true: （默认值）返回整数，不保留小数</li><li>number: 自定义指定多少位小数</li></ul></li><li><p><strong>@return</strong> 返回<code>[h, w, b]</code></p></li></ul><h2 id="color-xyz" tabindex="-1"><a class="header-anchor" href="#color-xyz" aria-hidden="true">#</a> color.xyz()</h2><ul><li><p><strong>@param</strong> round: boolean | number</p><ul><li>false: 不进行小数处理，返回所有小数位</li><li>true: （默认值）保留小数位数：2</li><li>number: 自定义指定多少位小数</li></ul></li><li><p><strong>@return</strong> 返回<code>[x, y, z]</code></p></li></ul><h2 id="color-lab" tabindex="-1"><a class="header-anchor" href="#color-lab" aria-hidden="true">#</a> color.lab()</h2><ul><li><p><strong>@param</strong> round: boolean | number</p><ul><li>false: 不进行小数处理，返回所有小数位</li><li>true: （默认值）保留小数位数：2</li><li>number: 自定义指定多少位小数</li></ul></li><li><p><strong>@return</strong> 返回<code>[l, a, b]</code></p></li></ul><h2 id="color-lch" tabindex="-1"><a class="header-anchor" href="#color-lch" aria-hidden="true">#</a> color.lch()</h2><ul><li><p><strong>@param</strong> round: boolean | number</p><ul><li>false: 不进行小数处理，返回所有小数位</li><li>true: （默认值）保留小数位数：2</li><li>number: 自定义指定多少位小数</li></ul></li><li><p><strong>@return</strong> 返回<code>[l, c, h]</code></p></li></ul><h2 id="color-xyy" tabindex="-1"><a class="header-anchor" href="#color-xyy" aria-hidden="true">#</a> color.xyY()</h2><ul><li><p><strong>@param</strong> round: boolean | number</p><ul><li>false: 不进行小数处理，返回所有小数位</li><li>true: （默认值）保留小数位数：2</li><li>number: 自定义指定多少位小数</li></ul></li><li><p><strong>@return</strong> 返回<code>[x, y, Y]</code></p></li></ul><h2 id="color-hex" tabindex="-1"><a class="header-anchor" href="#color-hex" aria-hidden="true">#</a> color.hex()</h2><ul><li><p><strong>@param</strong> alphaFlag: 0 | 1 | 2</p><ul><li>0: 不展示alpha值，</li><li>1：展示alpha值，</li><li>2：(默认值)当alpha不等于100%才展示alpha</li></ul></li><li><p><strong>@return</strong> 返回RGB十六进制字符串</p></li></ul>`,31),s=[r];function i(c,t){return n(),o("div",null,s)}const d=l(e,[["render",i],["__file","Converting.html.vue"]]);export{d as default};
