import{_ as o,M as p,p as c,q as l,N as s,U as e,t as n,a1 as t}from"./framework-cbc93935.js";const i={},r=t(`<h1 id="color-operation" tabindex="-1"><a class="header-anchor" href="#color-operation" aria-hidden="true">#</a> Color operation</h1><h2 id="example" tabindex="-1"><a class="header-anchor" href="#example" aria-hidden="true">#</a> Example</h2><p>Example1：Darken the color by 20%</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token function">colorsea</span><span class="token punctuation">(</span><span class="token string">&#39;#ff0000&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">darken</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token comment">// #cc0000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,4),u=t(`<p>Example2：</p><p>You can perform continuous operations: <strong>Rotate hue 180 degrees</strong> -&gt; <strong>Example1：Darken 30%</strong> -&gt; <strong>Reduce saturation 10%</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token function">colorsea</span><span class="token punctuation">(</span><span class="token string">&#39;#ff0000&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">spin</span><span class="token punctuation">(</span><span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">darken</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">desaturate</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment">// Color: #0ac2c2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,3),d=t(`<div class="custom-container tip"><p class="custom-container-title">TIP</p><p>Each operation will return a new Color instance object</p></div><h2 id="color-lighten" tabindex="-1"><a class="header-anchor" href="#color-lighten" aria-hidden="true">#</a> color.lighten()</h2><p>Increase lightness</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token doc-comment comment">/**
  * Increase lightness
  * <span class="token keyword">@param</span> <span class="token parameter">amount</span> Brightness increase percentage, the default is 5, which means 5%
  * <span class="token keyword">@param</span> <span class="token parameter">method</span> If you fill in &#39;relative&#39;, it means that the parameter amount is a relative value
  * <span class="token keyword">@returns</span> Color
  */</span>
color<span class="token punctuation">.</span><span class="token function">lighten</span><span class="token punctuation">(</span>amount<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> method<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Color
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Example: Increase lightness by 10%</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token function">colorsea</span><span class="token punctuation">(</span><span class="token string">&#39;#338800&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lighten</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment">// Color: #46bb00</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,6),m=t(`<h2 id="color-darken" tabindex="-1"><a class="header-anchor" href="#color-darken" aria-hidden="true">#</a> color.darken()</h2><p>Reduce lightness</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code> <span class="token doc-comment comment">/**
   * Reduce lightness
   * <span class="token keyword">@param</span> <span class="token parameter">amount</span> The percentage of lightness reduction, the default is 5, which means 5%
   * <span class="token keyword">@param</span> <span class="token parameter">method</span> If you fill in &#39;relative&#39;, it means that the parameter amount is a relative value
   * <span class="token keyword">@returns</span> Color
   */</span>
color<span class="token punctuation">.</span><span class="token function">darken</span><span class="token punctuation">(</span>amount<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> method<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Color
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Example: Reduce lightness by 10%</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token function">colorsea</span><span class="token punctuation">(</span><span class="token string">&#39;#338800&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">darken</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment">// Color: #205500</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,5),k=t(`<h2 id="color-saturate" tabindex="-1"><a class="header-anchor" href="#color-saturate" aria-hidden="true">#</a> color.saturate()</h2><p>Increase saturation</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code> <span class="token doc-comment comment">/**
   * Increase saturation
   * <span class="token keyword">@param</span> <span class="token parameter">amount</span> How much to increase the saturation, the default is 5, which means 5%
   * <span class="token keyword">@param</span> <span class="token parameter">method</span> If you fill in &#39;relative&#39;, it means that the parameter amount is a relative value
   * <span class="token keyword">@returns</span> new Color
   */</span>
color<span class="token punctuation">.</span><span class="token function">saturate</span><span class="token punctuation">(</span>amount<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> method<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Color
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Example: Increase saturation by 30%</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token function">colorsea</span><span class="token punctuation">(</span><span class="token string">&#39;#E5B7A1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">saturate</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token comment">// Color: #f7b18f</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,5),v=t(`<h2 id="color-desaturate" tabindex="-1"><a class="header-anchor" href="#color-desaturate" aria-hidden="true">#</a> color.desaturate()</h2><p>Reduce saturation</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code> <span class="token doc-comment comment">/**
   * Reduce saturation
   * <span class="token keyword">@param</span> <span class="token parameter">amount</span> The percentage of saturation reduction, the default is 5, which means 5%
   * <span class="token keyword">@param</span> <span class="token parameter">method</span> If you fill in &#39;relative&#39;, it means that the parameter amount is a relative value
   * <span class="token keyword">@returns</span> new Color
   */</span>
color<span class="token punctuation">.</span><span class="token function">desaturate</span><span class="token punctuation">(</span>amount<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> method<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Color
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Example: Reduce saturation by 50%</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token function">colorsea</span><span class="token punctuation">(</span><span class="token string">&#39;#00ff00&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">desaturate</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token comment">// Color: #40bf40</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,5),b=t(`<h2 id="color-spin" tabindex="-1"><a class="header-anchor" href="#color-spin" aria-hidden="true">#</a> color.spin()</h2><p>Rotate hue</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token doc-comment comment">/**
  * Rotate hue
  * <span class="token keyword">@param</span> <span class="token parameter">angle</span> rotation angle
  */</span>
color<span class="token punctuation">.</span><span class="token function">spin</span><span class="token punctuation">(</span>angle<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Color
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Example: Rotate hue 90 degrees clockwise</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token function">colorsea</span><span class="token punctuation">(</span><span class="token string">&#39;#00ff00&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">spin</span><span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">)</span> <span class="token comment">// Color: #007fff</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,5),f=t(`<h2 id="color-adjusthue" tabindex="-1"><a class="header-anchor" href="#color-adjusthue" aria-hidden="true">#</a> color.adjustHue()</h2><p><code>color.adjustHue</code> is an alias of <code>color.spin</code>, the usage is consistent with color.spin</p><h2 id="color-complement" tabindex="-1"><a class="header-anchor" href="#color-complement" aria-hidden="true">#</a> color.complement()</h2><p>Get the complementary color, equivalent to <code>color.spin(180)</code></p><p>Example:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token function">colorsea</span><span class="token punctuation">(</span><span class="token string">&#39;#00ff00&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">complement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// Color: #0f00ff</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,6),h=t(`<h2 id="color-invert" tabindex="-1"><a class="header-anchor" href="#color-invert" aria-hidden="true">#</a> color.invert()</h2><p>reverse color</p><p>Example:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token function">colorsea</span><span class="token punctuation">(</span><span class="token string">&#39;#ff3366&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// Color: #00cc99</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,4),g=t(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token function">colorsea</span><span class="token punctuation">(</span><span class="token string">&#39;#cccccc&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// Color: #333333</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,1),x=t(`<h2 id="color-mix" tabindex="-1"><a class="header-anchor" href="#color-mix" aria-hidden="true">#</a> color.mix()</h2><p>color mixing</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token doc-comment comment">/**
  * mix color
  * <span class="token keyword">@param</span> <span class="token parameter">color</span> Another color, which can be a Color instance, a hexadecimal color string, or an [r, g, b] color tuple
  * <span class="token keyword">@param</span> <span class="token parameter">weight</span> The mixing ratio of another color, the default value is 50 or 50%
  * <span class="token keyword">@returns</span> Color
  */</span>
color<span class="token punctuation">.</span><span class="token function">mix</span><span class="token punctuation">(</span>color<span class="token operator">:</span> Color<span class="token punctuation">,</span> weight<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Color
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Example 1: rgb(30, 177, 250) mixed with 60% hsl(0, 100%, 20%)</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token function">colorsea</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">177</span><span class="token punctuation">,</span> <span class="token number">250</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mix</span><span class="token punctuation">(</span>colorsea<span class="token punctuation">.</span><span class="token function">hsl</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span> <span class="token comment">// Color #494764</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,5),y=t(`<p>Example 2: Mix of #CE9FFC and #EA5455, 50% each</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> color1 <span class="token operator">=</span> <span class="token function">colorsea</span><span class="token punctuation">(</span><span class="token string">&#39;#CE9FFC&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> color2 <span class="token operator">=</span> <span class="token function">colorsea</span><span class="token punctuation">(</span><span class="token string">&#39;#EA5455&#39;</span><span class="token punctuation">)</span>
color1<span class="token punctuation">.</span><span class="token function">mix</span><span class="token punctuation">(</span>color2<span class="token punctuation">)</span> <span class="token comment">// Color #dc7aa9</span>
<span class="token comment">// or color2 can not create a Color instance, directly use the hex string</span>
color1<span class="token punctuation">.</span><span class="token function">mix</span><span class="token punctuation">(</span><span class="token string">&#39;#EA5455&#39;</span><span class="token punctuation">)</span> <span class="token comment">// Color #dc7aa9</span>
<span class="token comment">// or color2 is passed directly to the [r, g, b] tuple</span>
color1<span class="token punctuation">.</span><span class="token function">mix</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">234</span><span class="token punctuation">,</span> <span class="token number">84</span><span class="token punctuation">,</span> <span class="token number">85</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// Color #dc7aa9</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),_=t(`<p>Example 3: Continuous Mixing</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token function">colorsea</span><span class="token punctuation">(</span><span class="token string">&#39;#0396FF&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mix</span><span class="token punctuation">(</span><span class="token string">&#39;#7367F0&#39;</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mix</span><span class="token punctuation">(</span><span class="token string">&#39;#EA5455&#39;</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span> <span class="token comment">// #896da8</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,2),C=t(`<h2 id="color-fadein" tabindex="-1"><a class="header-anchor" href="#color-fadein" aria-hidden="true">#</a> color.fadeIn()</h2><p>Increase opacity</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code> <span class="token doc-comment comment">/**
   * Increase opacity
   * <span class="token keyword">@param</span> <span class="token parameter">amount</span> The value of opacity increase, the default is 10, which means 10%
   * <span class="token keyword">@param</span> <span class="token parameter">method</span> If you fill in &#39;relative&#39;, it means that the parameter amount is a relative value
   * <span class="token keyword">@returns</span> new Color
   */</span>
color<span class="token punctuation">.</span><span class="token function">fadeIn</span><span class="token punctuation">(</span>amount<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> method<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Color
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Example:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token function">colorsea</span><span class="token punctuation">(</span><span class="token string">&#39;#ff0000&#39;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fadeIn</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token comment">// #ff000066</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,5),w=t(`<h2 id="color-fadeout" tabindex="-1"><a class="header-anchor" href="#color-fadeout" aria-hidden="true">#</a> color.fadeOut()</h2><p>Reduce opacity</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code> <span class="token doc-comment comment">/**
   * Reduce opacity
   * <span class="token keyword">@param</span> <span class="token parameter">amount</span> The value of opacity reduction, the default is 10, which means 10%
   * <span class="token keyword">@param</span> <span class="token parameter">method</span> If you fill in &#39;relative&#39;, it means that the parameter amount is a relative value
   * <span class="token keyword">@returns</span> new Color
   */</span>
color<span class="token punctuation">.</span><span class="token function">fadeOut</span><span class="token punctuation">(</span>amount<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> method<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Color
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Example:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token function">colorsea</span><span class="token punctuation">(</span><span class="token string">&#39;#ff0000&#39;</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fadeOut</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token comment">// #ff000080</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,5),E=t('<h2 id="color-opacify" tabindex="-1"><a class="header-anchor" href="#color-opacify" aria-hidden="true">#</a> color.opacify()</h2><p><code>color.opacify</code> is an alias of <code>color.fadeIn</code>, the usage is consistent with <code>color.fadeIn</code></p><h2 id="color-transparentize" tabindex="-1"><a class="header-anchor" href="#color-transparentize" aria-hidden="true">#</a> color.transparentize()</h2><p><code>color.transparentize</code> is an alias of <code>color.fadeOut</code>, the usage is consistent with <code>color.fadeOut</code></p>',4);function I(F,R){const a=p("ColorBox");return c(),l("div",null,[r,s(a,{"box-color":"#ff0000"},{default:e(()=>[n("#ff0000")]),_:1}),n(" -> "),s(a,{"box-color":"#990000"},{default:e(()=>[n("#990000")]),_:1}),u,s(a,{"box-color":"#ff0000"},{default:e(()=>[n("#ff0000")]),_:1}),n(" -> "),s(a,{"box-color":"#056161"},{default:e(()=>[n("#056161")]),_:1}),d,s(a,{"box-color":"#338800"},{default:e(()=>[n("#338800")]),_:1}),n(" -> "),s(a,{"box-color":"#46bb00"},{default:e(()=>[n("#46bb00")]),_:1}),m,s(a,{"box-color":"#338800"},{default:e(()=>[n("#338800")]),_:1}),n(" -> "),s(a,{"box-color":"#205500"},{default:e(()=>[n("#205500")]),_:1}),k,s(a,{"box-color":"#E5B7A1"},{default:e(()=>[n("#E5B7A1")]),_:1}),n(" -> "),s(a,{"box-color":"#f7b18f"},{default:e(()=>[n("#f7b18f")]),_:1}),v,s(a,{"box-color":"#00ff00"},{default:e(()=>[n("#00ff00")]),_:1}),n(" -> "),s(a,{"box-color":"#40bf40"},{default:e(()=>[n("#40bf40")]),_:1}),b,s(a,{"box-color":"#00ff00"},{default:e(()=>[n("#00ff00")]),_:1}),n(" -> "),s(a,{"box-color":"#007fff"},{default:e(()=>[n("#007fff")]),_:1}),f,s(a,{"box-color":"#f0ff00","text-color":"#000000"},{default:e(()=>[n("#00ff00")]),_:1}),n(" -> "),s(a,{"box-color":"#0f00ff"},{default:e(()=>[n("#0f00ff")]),_:1}),h,s(a,{"box-color":"#ff3366"},{default:e(()=>[n("#ff3366")]),_:1}),n(" -> "),s(a,{"box-color":"#00cc99"},{default:e(()=>[n("#00cc99")]),_:1}),g,s(a,{"box-color":"#cccccc","text-color":"#000000"},{default:e(()=>[n("#cccccc")]),_:1}),n(" -> "),s(a,{"box-color":"#333333"},{default:e(()=>[n("#333333")]),_:1}),x,s(a,{"box-color":"rgb(30, 177, 250)"},{default:e(()=>[n("rgb(30, 177, 250)")]),_:1}),n(" .mix("),s(a,{"box-color":"hsl(0 100% 20%)"},{default:e(()=>[n("hsl(0 100% 20%)")]),_:1}),n(", 60) == "),s(a,{"box-color":"rgb(73, 71, 100)"},{default:e(()=>[n("rgb(73, 71, 100)")]),_:1}),y,s(a,{"box-color":"#CE9FFC"},{default:e(()=>[n("#CE9FFC")]),_:1}),n(" .mix("),s(a,{"box-color":"#EA5455"},{default:e(()=>[n("#EA5455")]),_:1}),n(", 50) == "),s(a,{"box-color":"#dc7aa9"},{default:e(()=>[n("#dc7aa9")]),_:1}),_,s(a,{"box-color":"#0396FF"},{default:e(()=>[n("#0396FF")]),_:1}),n(" .mix("),s(a,{"box-color":"#7367F0"},{default:e(()=>[n("#7367F0")]),_:1}),n(", 33).mix("),s(a,{"box-color":"#EA5455"},{default:e(()=>[n("#EA5455")]),_:1}),n(", 50) == "),s(a,{"box-color":"#896da8"},{default:e(()=>[n("#896da8")]),_:1}),C,s(a,{"box-color":"#ff00001a"},{default:e(()=>[n("#ff00001a")]),_:1}),n(" -> "),s(a,{"box-color":"#ff000066"},{default:e(()=>[n("#ff000066")]),_:1}),w,s(a,{"box-color":"#ff0000"},{default:e(()=>[n("#ff0000")]),_:1}),n(" -> "),s(a,{"box-color":"#ff000080"},{default:e(()=>[n("#ff000080")]),_:1}),E])}const B=o(i,[["render",I],["__file","ColorOperation.html.vue"]]);export{B as default};
